"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[656],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(t),m=a,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return t?r.createElement(h,o(o({ref:n},u),{},{components:t})):r.createElement(h,o({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=p;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},8748:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return u},default:function(){return p}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),o=["components"],c={sidebar_position:0,title:"Basic Setup Template"},s=void 0,l={unversionedId:"Tutorials/basic-template",id:"Tutorials/basic-template",isDocsHomePage:!1,title:"Basic Setup Template",description:"Here is a minimal example you can copy into your favorite IDE.",source:"@site/docs/Tutorials/basic-template.md",sourceDirName:"Tutorials",slug:"/Tutorials/basic-template",permalink:"/zea-engine/Tutorials/basic-template",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0,title:"Basic Setup Template"},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/zea-engine/Tutorials/tutorials"},next:{title:"Changing the Background Color",permalink:"/zea-engine/Tutorials/changing-the-background"}},u=[{value:"index.html",id:"indexhtml",children:[]},{value:"main.js",id:"mainjs",children:[]}],d={toc:u};function p(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Here is a minimal example you can copy into your favorite IDE.\nCreate a directory structure like the following, then copy and paste the contents of index.html and main.js, found below, into your project."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"myProject\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 main.js\n")),(0,i.kt)("p",null,"An example of this setup can be found on ",(0,i.kt)("a",{parentName:"p",href:"https://glitch.com/edit/#!/zea-minimal-app"},"glitch"),". After clicking on the link, click 'remix to edit' at the top right of the screen to modify this project."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"If you are using ",(0,i.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/"},"Visual Studio Code"),", it's recommended you download the extension ",(0,i.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"},"Live Server"),". Live Server makes it easy to launch a local development server that reloads automatically as changes are made to your source code.")),(0,i.kt)("h3",{id:"indexhtml"},"index.html"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html>\n  \x3c!-- download Zea Engine -- this downloads the latest build from version 3 of the engine --\x3e\n  <script crossorigin src="https://cdn.jsdelivr.net/npm/@zeainc/zea-engine@3/dist/index.umd.js"><\/script>\n  \x3c!-- download our stylesheet --\x3e\n  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.9/tailwind.min.css" />\n\n  <head>\n    <title>Zea Engine App</title>\n  </head>\n\n  <body class="overflow-hidden">\n    <div class="layout grid h-screen">\n      <main>\n        \x3c!-- HTML Canvas -- what we render to --\x3e\n        <canvas id="canvas"></canvas>\n      </main>\n    </div>\n\n    \x3c!-- Run your code here --\x3e\n    <script type="module">\n      import { main } from \'./main.js\'\n      main() // modify this function in main.js\n    <\/script>\n  </body>\n</html>\n')),(0,i.kt)("h3",{id:"mainjs"},"main.js"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// Zea Engine dependencies stored in new const variables. View the API to see what you can include and use.\nconst { Scene, GLRenderer, Vec3, Color, Xfo, Quat, GeomItem, Sphere, Material, Ray, MathFunctions } = window.zeaEngine\n\nexport function main() {\n  // create a new scene\n  const scene = new Scene()\n\n  // create a new renderer and attach it to our HTML Canvas\n  const renderer = new GLRenderer(document.getElementById('canvas'))\n\n  // attach the scene to the renderer. Anything attached to this scene will now be rendererd.\n  renderer.setScene(scene)\n\n  // get the camera from renderer\n  const camera = renderer.getViewport().getCamera()\n  // set camera's target and position.\n  camera.setPositionAndTarget(new Vec3(6, 6, 5), new Vec3(0, 0, 1.5))\n\n  // These variables can be used later in our program\n  const grid_size = 10\n  const grid_div = 10\n  const grid_div_size = grid_size / grid_div\n\n  scene.setupGrid(grid_size, grid_div)\n\n  /*\n      Write your code below\n  */\n}\n")))}p.isMDXComponent=!0}}]);