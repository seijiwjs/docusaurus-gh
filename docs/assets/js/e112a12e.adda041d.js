"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[520],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(h,a(a({ref:t},p),{},{components:n})):r.createElement(h,a({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3447:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],s={sidebar_position:2,title:"Moving Objects Using Your Mouse",hide_table_of_contents:!0},l=void 0,c={unversionedId:"Tutorials/move-object",id:"Tutorials/move-object",isDocsHomePage:!1,title:"Moving Objects Using Your Mouse",description:"In this tutorial, we will cover how to move objects with the mouse using events.",source:"@site/docs/Tutorials/move-object.md",sourceDirName:"Tutorials",slug:"/Tutorials/move-object",permalink:"/zea-engine/Tutorials/move-object",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Moving Objects Using Your Mouse",hide_table_of_contents:!0},sidebar:"tutorialSidebar",previous:{title:"Changing the Background Color",permalink:"/zea-engine/Tutorials/changing-the-background"},next:{title:"Loading Asset Files",permalink:"/zea-engine/Tutorials/load-an-asset"}},p=[{value:"1) Minimal Setup",id:"1-minimal-setup",children:[]},{value:"2) Adding Geometry",id:"2-adding-geometry",children:[]},{value:"3) Adding Listeners",id:"3-adding-listeners",children:[]},{value:"Challenges",id:"challenges",children:[]},{value:"Conclusion:",id:"conclusion",children:[]}],u={toc:p};function d(e){var t=e.components,s=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In this tutorial, we will cover how to move objects with the mouse using events."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#1-minimal-setup"},"Minimal Setup")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#2-adding-geometry"},"Adding Geometry")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#3-adding-listeners"},"Adding Listeners"))),(0,i.kt)("p",null,"Below, you'll find an interactive demo and the end result of this tutorial."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Try: click on the sphere and move it around.")),(0,i.kt)("iframe",{src:"https://glitch.com/embed/#!/embed/sphere-drag?path=index.html&previewSize=100",title:"sphere-drag on Glitch",allow:"geolocation; microphone; camera; midi; vr; encrypted-media",class:"glitch",markdown:"1"}),(0,i.kt)("h2",{id:"1-minimal-setup"},"1) Minimal Setup"),(0,i.kt)("p",null,"First, get set up. You can do this one of two ways, locally or by using glitch."),(0,i.kt)("p",null,"a) ",(0,i.kt)("a",{parentName:"p",href:"/zea-engine/Tutorials/basic-template"},"Basic Setup"),"\nCreate a project locally in your favorite IDE"),(0,i.kt)("p",null,"b) ",(0,i.kt)("a",{parentName:"p",href:"https://glitch.com/edit/#!/zea-minimal-app"},"Basic Setup on Glitch"),"\nfollow the link and click 'remix to edit' at the top right of the screen to modify this project."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"To learn more about how to set up your environment, view the ",(0,i.kt)("a",{parentName:"p",href:"/zea-engine/Manual/Getting-Started/getting-started-overview"},"Getting Started")," guide.")),(0,i.kt)("h2",{id:"2-adding-geometry"},"2) Adding Geometry"),(0,i.kt)("p",null,"Let's add a sphere to our scene. We do this by creating a material for the object to use, along with procedurally created ",(0,i.kt)("a",{parentName:"p",href:"../API/SceneTree/Geometry/Shapes/SceneTree_Geometry_Shapes_Sphere.Sphere"},"sphere")," for our ",(0,i.kt)("a",{parentName:"p",href:"../API/SceneTree/SceneTree_GeomItem.GeomItem"},"GeomItem")," to reference.\nThen we add our new geomItem to our scene tree; we can add a geomItem to the scene tree since GeomItem is a subclass of ",(0,i.kt)("a",{parentName:"p",href:"../API/SceneTree/SceneTree_TreeItem.TreeItem"},"TreeItem")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// Let's create a new material that uses the 'Simple Surface Shader.'\nconst material = new Material('surfaces', 'SimpleSurfaceShader')\n\n// Here we access the BaseColor parameter and set the value to a light gray.\nmaterial.getParameter('BaseColor').setValue(new Color(249 / 255, 206 / 255, 3 / 255))\n\n// Here we create procedural geometry to be used by our geomItems.\n// radius = 1.0, vertical sections = 20, horizontal sections = 20\nconst sphere = new Sphere(1.0, 20, 20)\n\n// Let's create a GeomItem.\nconst geomItem = new GeomItem('sphere_name', sphere, material)\n\n// If we want to render our newely created geomItem, we have to add it to our scene tree.\nscene.getRoot().addChild(geomItem)\n")),(0,i.kt)("p",null,"You should now have a sphere positioned at the center of the grid."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"sphere",src:n(5707).Z,title:":class = screenshot"})),(0,i.kt)("h2",{id:"3-adding-listeners"},"3) Adding Listeners"),(0,i.kt)("p",null,"Here we add three event listeners, pointerDown, pointerUp, and pointerMove, to geomItem."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"PointerDown will be triggered when we click with our mouse while our cursor is hovering over our geomItem."),(0,i.kt)("li",{parentName:"ul"},"PointerUp will be triggered when we release a click with our mouse while our cursor is hovering over our geomItem."),(0,i.kt)("li",{parentName:"ul"},"PointerMove will be triggered every frame when our cursor is over the geomItem.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// an example of registering an event listener to an object in our scene.\ngeomItem.on('pointerDown', (event) => {\n  // called every time we click down on the geomItem.\n})\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"View ",(0,i.kt)("a",{parentName:"p",href:"../API/Renderer/Renderer_GLViewport.GLViewport"},"GLViewport")," and ",(0,i.kt)("a",{parentName:"p",href:"../API/SceneTree/SceneTree_TreeItem.TreeItem"},"TreeItem")," to learn more about what events are emitted by the Viewport and TreeItem classes.")),(0,i.kt)("h4",{id:"basic-dragging-functionality"},"Basic Dragging Functionality"),(0,i.kt)("p",null,"To create dragging functionality, we need to use the method setCapture() and releaseCapture(). We use these methods so that geomItem captures all of the 'pointerMove' events even when our cursor is not over the sphere. If we did not use setCapture() and releaseCapture(), the sphere would not update it's position if our cursor was not hovering over the sphere."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"let dragging = false\n\ngeomItem.on('pointerDown', (event) => {\n  // event.setCapture() will send all events to geomItem until event.releaseCapture() is called.\n  // this is useful here, since our cursor is likely to leave the sphere as we drag toward where\n  /// we want the sphere to go.\n  event.setCapture(geomItem)\n  dragging = true\n})\n\n// geomItem listens to 'pointerMove' event.\ngeomItem.on('pointerMove', (event) => {\n  if (dragging) {\n    // if dragging is still true (by not releasing the mouse button) this code should run.\n    /*\n          Add dragging code here\n        */\n  }\n})\n\ngeomItem.on('pointerUp', (event) => {\n  if (event.getCapture() == geomItem) {\n    event.releaseCapture()\n    dragging = false\n  }\n})\n")),(0,i.kt)("h4",{id:"ray-plane-intersection"},"Ray-Plane Intersection"),(0,i.kt)("p",null,"The events emitted by the GeomItem are similar to 'mouseMove' or 'mouseDown' on a 2d DOM element. They are different in that they have a few more properties specific to 3d scenes. One property available on the event is 'pointerRay', which is the ray that starts at the current camera position, and goes through the clicked pixel in your screen into the 3d world."),(0,i.kt)("p",null,"The following code finds the point of intersection between the ground plane and the pointerRay. We will use this in the dragging code found below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// this function returns the point of intersection between the ground plane and pointer ray.\nfunction ray_plane_intersection(event) {\n  const ray = event.pointerRay\n  // A plane with an infinite span can be represented as a ray (point and direction)\n  // in this case, the floor is at point (0,0,0) and points upwards.\n  const floor = new Ray(new Vec3(0, 0, 0), new Vec3(0, 0, 1))\n  const dist = ray.intersectRayPlane(floor)\n  const hit_pt = ray.start.add(ray.dir.scale(dist))\n  return hit_pt\n}\n")),(0,i.kt)("h4",{id:"on-pointer-move-event-code"},"On Pointer Move Event Code"),(0,i.kt)("p",null,"Add this code to the 'pointerMove' event block. This code will look at the positions of the sphere and the ray-plane intersection, then move the sphere to intersection point. If the position is outside the grid, we find the closest point that is within the grid to move the sphere to."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// get xfo of sphere\nconst geomItem_xfo = geomItem.getParameter('GlobalXfo').getValue()\n// get transform of sphere (i.e. it's position in xyz space)\nconst old_pos = geomItem_xfo.tr\n\n// this gets the intersection of pointer ray and ground plane. This will be the next position for our sphere.\nconst hit_pt = ray_plane_intersection(event)\n\n// limit sphere to stay within the grid\nlet x = Math.min(Math.max(hit_pt.x, -grid_size / 2.0), grid_size / 2.0)\nlet y = Math.min(Math.max(hit_pt.y, -grid_size / 2.0), grid_size / 2.0)\n// create a new Vec3 with desired new coordinates\nlet new_pos = new Vec3(x, y, old_pos.z)\n\n// Optionally, add grid snapping\n// const grid_x = Math.round(x/grid_div_size)*grid_div_size\n// const grid_y = Math.round(y/grid_div_size)*grid_div_size\n// new_pos = new Vec3(grid_x, grid_y, old_pos.z)\n\n// set sphere's new position.\ngeomItem_xfo.tr = new_pos\ngeomItem.getParameter('GlobalXfo').setValue(geomItem_xfo)\n")),(0,i.kt)("h2",{id:"challenges"},"Challenges"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"enable grid snapping"),(0,i.kt)("li",{parentName:"ul"},"change the color of the sphere based on the position within the grid.")),(0,i.kt)("h2",{id:"conclusion"},"Conclusion:"),(0,i.kt)("p",null,"In this tutorial we covered how to add procedural geometry to our scene and how to add listeners to a geomItem in our scene tree."))}d.isMDXComponent=!0},5707:function(e,t,n){t.Z=n.p+"assets/images/sphere-drag-step2-2ae1f16aab1aa38426b7659344053b2d.png"}}]);